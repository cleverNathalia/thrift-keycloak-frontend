{"remainingRequest":"/home/admin/Documents/thrift-client/node_modules/babel-loader/lib/index.js!/home/admin/Documents/thrift-client/node_modules/ts-loader/index.js??ref--13-2!/home/admin/Documents/thrift-client/src/gen-js/Person.ts","dependencies":[{"path":"/home/admin/Documents/thrift-client/src/gen-js/Person.ts","mtime":1582711536771},{"path":"/home/admin/Documents/thrift-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/admin/Documents/thrift-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/admin/Documents/thrift-client/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiL2hvbWUvYWRtaW4vRG9jdW1lbnRzL3RocmlmdC1jbGllbnQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NsYXNzQ2FsbENoZWNrIjsKaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICIvaG9tZS9hZG1pbi9Eb2N1bWVudHMvdGhyaWZ0LWNsaWVudC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwoKLyogdHNsaW50OmRpc2FibGUgKi8KCi8qIGVzbGludC1kaXNhYmxlICovCgovKgogKiBBdXRvZ2VuZXJhdGVkIGJ5IEBjcmVkaXRrYXJtYS90aHJpZnQtdHlwZXNjcmlwdCB2My43LjYKICogRE8gTk9UIEVESVQgVU5MRVNTIFlPVSBBUkUgU1VSRSBUSEFUIFlPVSBLTk9XIFdIQVQgWU9VIEFSRSBET0lORwoqLwppbXBvcnQgKiBhcyB0aHJpZnQgZnJvbSAidGhyaWZ0IjsKZXhwb3J0IHZhciBQZXJzb24gPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQZXJzb24oYXJncykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBlcnNvbik7CgogICAgaWYgKGFyZ3MgIT0gbnVsbCAmJiBhcmdzLmlkICE9IG51bGwpIHsKICAgICAgdGhpcy5pZCA9IGFyZ3MuaWQ7CiAgICB9CgogICAgaWYgKGFyZ3MgIT0gbnVsbCAmJiBhcmdzLm5hbWUgIT0gbnVsbCkgewogICAgICB0aGlzLm5hbWUgPSBhcmdzLm5hbWU7CiAgICB9CgogICAgaWYgKGFyZ3MgIT0gbnVsbCAmJiBhcmdzLmFkZHJlc3MgIT0gbnVsbCkgewogICAgICB0aGlzLmFkZHJlc3MgPSBhcmdzLmFkZHJlc3M7CiAgICB9CgogICAgaWYgKGFyZ3MgIT0gbnVsbCAmJiBhcmdzLnBob25lICE9IG51bGwpIHsKICAgICAgdGhpcy5waG9uZSA9IGFyZ3MucGhvbmU7CiAgICB9CiAgfQoKICBfY3JlYXRlQ2xhc3MoUGVyc29uLCBbewogICAga2V5OiAid3JpdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlKG91dHB1dCkgewogICAgICBvdXRwdXQud3JpdGVTdHJ1Y3RCZWdpbigiUGVyc29uIik7CgogICAgICBpZiAodGhpcy5pZCAhPSBudWxsKSB7CiAgICAgICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigiaWQiLCB0aHJpZnQuVGhyaWZ0LlR5cGUuU1RSSU5HLCAxKTsKICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcodGhpcy5pZCk7CiAgICAgICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMubmFtZSAhPSBudWxsKSB7CiAgICAgICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigibmFtZSIsIHRocmlmdC5UaHJpZnQuVHlwZS5TVFJJTkcsIDIpOwogICAgICAgIG91dHB1dC53cml0ZVN0cmluZyh0aGlzLm5hbWUpOwogICAgICAgIG91dHB1dC53cml0ZUZpZWxkRW5kKCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmFkZHJlc3MgIT0gbnVsbCkgewogICAgICAgIG91dHB1dC53cml0ZUZpZWxkQmVnaW4oImFkZHJlc3MiLCB0aHJpZnQuVGhyaWZ0LlR5cGUuU1RSSU5HLCAzKTsKICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcodGhpcy5hZGRyZXNzKTsKICAgICAgICBvdXRwdXQud3JpdGVGaWVsZEVuZCgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5waG9uZSAhPSBudWxsKSB7CiAgICAgICAgb3V0cHV0LndyaXRlRmllbGRCZWdpbigicGhvbmUiLCB0aHJpZnQuVGhyaWZ0LlR5cGUuU1RSSU5HLCA0KTsKICAgICAgICBvdXRwdXQud3JpdGVTdHJpbmcodGhpcy5waG9uZSk7CiAgICAgICAgb3V0cHV0LndyaXRlRmllbGRFbmQoKTsKICAgICAgfQoKICAgICAgb3V0cHV0LndyaXRlRmllbGRTdG9wKCk7CiAgICAgIG91dHB1dC53cml0ZVN0cnVjdEVuZCgpOwogICAgICByZXR1cm47CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZWFkKGlucHV0KSB7CiAgICAgIGlucHV0LnJlYWRTdHJ1Y3RCZWdpbigpOwogICAgICB2YXIgX2FyZ3MgPSB7fTsKCiAgICAgIHdoaWxlICh0cnVlKSB7CiAgICAgICAgdmFyIHJldCA9IGlucHV0LnJlYWRGaWVsZEJlZ2luKCk7CiAgICAgICAgdmFyIGZpZWxkVHlwZSA9IHJldC5mdHlwZTsKICAgICAgICB2YXIgZmllbGRJZCA9IHJldC5maWQ7CgogICAgICAgIGlmIChmaWVsZFR5cGUgPT09IHRocmlmdC5UaHJpZnQuVHlwZS5TVE9QKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIHN3aXRjaCAoZmllbGRJZCkgewogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICBpZiAoZmllbGRUeXBlID09PSB0aHJpZnQuVGhyaWZ0LlR5cGUuU1RSSU5HKSB7CiAgICAgICAgICAgICAgdmFyIHZhbHVlXzEgPSBpbnB1dC5yZWFkU3RyaW5nKCk7CiAgICAgICAgICAgICAgX2FyZ3MuaWQgPSB2YWx1ZV8xOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlucHV0LnNraXAoZmllbGRUeXBlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICBpZiAoZmllbGRUeXBlID09PSB0aHJpZnQuVGhyaWZ0LlR5cGUuU1RSSU5HKSB7CiAgICAgICAgICAgICAgdmFyIHZhbHVlXzIgPSBpbnB1dC5yZWFkU3RyaW5nKCk7CiAgICAgICAgICAgICAgX2FyZ3MubmFtZSA9IHZhbHVlXzI7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgaW5wdXQuc2tpcChmaWVsZFR5cGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIGlmIChmaWVsZFR5cGUgPT09IHRocmlmdC5UaHJpZnQuVHlwZS5TVFJJTkcpIHsKICAgICAgICAgICAgICB2YXIgdmFsdWVfMyA9IGlucHV0LnJlYWRTdHJpbmcoKTsKICAgICAgICAgICAgICBfYXJncy5hZGRyZXNzID0gdmFsdWVfMzsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpbnB1dC5za2lwKGZpZWxkVHlwZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgaWYgKGZpZWxkVHlwZSA9PT0gdGhyaWZ0LlRocmlmdC5UeXBlLlNUUklORykgewogICAgICAgICAgICAgIHZhciB2YWx1ZV80ID0gaW5wdXQucmVhZFN0cmluZygpOwogICAgICAgICAgICAgIF9hcmdzLnBob25lID0gdmFsdWVfNDsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBpbnB1dC5za2lwKGZpZWxkVHlwZSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBpbnB1dC5za2lwKGZpZWxkVHlwZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlucHV0LnJlYWRGaWVsZEVuZCgpOwogICAgICB9CgogICAgICBpbnB1dC5yZWFkU3RydWN0RW5kKCk7CiAgICAgIHJldHVybiBuZXcgUGVyc29uKF9hcmdzKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQZXJzb247Cn0oKTs="},{"version":3,"sources":["/home/admin/Documents/thrift-client/src/gen-js/Person.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.6\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n*/\nimport * as thrift from \"thrift\";\nexport interface IPersonArgs {\n    id?: string;\n    name?: string;\n    address?: string;\n    phone?: string;\n}\nexport class Person {\n    public id?: string;\n    public name?: string;\n    public address?: string;\n    public phone?: string;\n    constructor(args?: IPersonArgs) {\n        if (args != null && args.id != null) {\n            this.id = args.id;\n        }\n        if (args != null && args.name != null) {\n            this.name = args.name;\n        }\n        if (args != null && args.address != null) {\n            this.address = args.address;\n        }\n        if (args != null && args.phone != null) {\n            this.phone = args.phone;\n        }\n    }\n    public write(output: thrift.TProtocol): void {\n        output.writeStructBegin(\"Person\");\n        if (this.id != null) {\n            output.writeFieldBegin(\"id\", thrift.Thrift.Type.STRING, 1);\n            output.writeString(this.id);\n            output.writeFieldEnd();\n        }\n        if (this.name != null) {\n            output.writeFieldBegin(\"name\", thrift.Thrift.Type.STRING, 2);\n            output.writeString(this.name);\n            output.writeFieldEnd();\n        }\n        if (this.address != null) {\n            output.writeFieldBegin(\"address\", thrift.Thrift.Type.STRING, 3);\n            output.writeString(this.address);\n            output.writeFieldEnd();\n        }\n        if (this.phone != null) {\n            output.writeFieldBegin(\"phone\", thrift.Thrift.Type.STRING, 4);\n            output.writeString(this.phone);\n            output.writeFieldEnd();\n        }\n        output.writeFieldStop();\n        output.writeStructEnd();\n        return;\n    }\n    public static read(input: thrift.TProtocol): Person {\n        input.readStructBegin();\n        let _args: any = {};\n        while (true) {\n            const ret: thrift.TField = input.readFieldBegin();\n            const fieldType: thrift.Thrift.Type = ret.ftype;\n            const fieldId: number = ret.fid;\n            if (fieldType === thrift.Thrift.Type.STOP) {\n                break;\n            }\n            switch (fieldId) {\n                case 1:\n                    if (fieldType === thrift.Thrift.Type.STRING) {\n                        const value_1: string = input.readString();\n                        _args.id = value_1;\n                    }\n                    else {\n                        input.skip(fieldType);\n                    }\n                    break;\n                case 2:\n                    if (fieldType === thrift.Thrift.Type.STRING) {\n                        const value_2: string = input.readString();\n                        _args.name = value_2;\n                    }\n                    else {\n                        input.skip(fieldType);\n                    }\n                    break;\n                case 3:\n                    if (fieldType === thrift.Thrift.Type.STRING) {\n                        const value_3: string = input.readString();\n                        _args.address = value_3;\n                    }\n                    else {\n                        input.skip(fieldType);\n                    }\n                    break;\n                case 4:\n                    if (fieldType === thrift.Thrift.Type.STRING) {\n                        const value_4: string = input.readString();\n                        _args.phone = value_4;\n                    }\n                    else {\n                        input.skip(fieldType);\n                    }\n                    break;\n                default: {\n                    input.skip(fieldType);\n                }\n            }\n            input.readFieldEnd();\n        }\n        input.readStructEnd();\n        return new Person(_args);\n    }\n}\n"],"sourceRoot":""}]}