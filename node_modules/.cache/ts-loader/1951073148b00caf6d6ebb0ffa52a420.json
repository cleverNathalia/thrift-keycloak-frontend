{"remainingRequest":"/home/admin/Documents/thrift-client/node_modules/babel-loader/lib/index.js!/home/admin/Documents/thrift-client/node_modules/ts-loader/index.js??ref--13-2!/home/admin/Documents/thrift-client/src/gen-js/HelloService.ts","dependencies":[{"path":"/home/admin/Documents/thrift-client/src/gen-js/HelloService.ts","mtime":1582711536786},{"path":"/home/admin/Documents/thrift-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/admin/Documents/thrift-client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/admin/Documents/thrift-client/node_modules/ts-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/admin/Documents/thrift-client/src/gen-js/HelloService.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.6\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n*/\nimport * as thrift from \"thrift\";\nimport * as Person from \"./Person\";\nexport interface IGetRoleArgsArgs {\n    role: string;\n}\nexport class GetRoleArgs {\n    public role: string;\n    constructor(args: IGetRoleArgsArgs) {\n        if (args != null && args.role != null) {\n            this.role = args.role;\n        }\n        else {\n            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, \"Required field[role] is unset!\");\n        }\n    }\n    public write(output: thrift.TProtocol): void {\n        output.writeStructBegin(\"GetRoleArgs\");\n        if (this.role != null) {\n            output.writeFieldBegin(\"role\", thrift.Thrift.Type.STRING, 1);\n            output.writeString(this.role);\n            output.writeFieldEnd();\n        }\n        output.writeFieldStop();\n        output.writeStructEnd();\n        return;\n    }\n    public static read(input: thrift.TProtocol): GetRoleArgs {\n        input.readStructBegin();\n        let _args: any = {};\n        while (true) {\n            const ret: thrift.TField = input.readFieldBegin();\n            const fieldType: thrift.Thrift.Type = ret.ftype;\n            const fieldId: number = ret.fid;\n            if (fieldType === thrift.Thrift.Type.STOP) {\n                break;\n            }\n            switch (fieldId) {\n                case 1:\n                    if (fieldType === thrift.Thrift.Type.STRING) {\n                        const value_1: string = input.readString();\n                        _args.role = value_1;\n                    }\n                    else {\n                        input.skip(fieldType);\n                    }\n                    break;\n                default: {\n                    input.skip(fieldType);\n                }\n            }\n            input.readFieldEnd();\n        }\n        input.readStructEnd();\n        if (_args.role !== undefined) {\n            return new GetRoleArgs(_args);\n        }\n        else {\n            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, \"Unable to read GetRoleArgs from input\");\n        }\n    }\n}\nexport interface IGetRoleResultArgs {\n    success?: Person.Person;\n}\nexport class GetRoleResult {\n    public success?: Person.Person;\n    constructor(args?: IGetRoleResultArgs) {\n        if (args != null && args.success != null) {\n            this.success = args.success;\n        }\n    }\n    public write(output: thrift.TProtocol): void {\n        output.writeStructBegin(\"GetRoleResult\");\n        if (this.success != null) {\n            output.writeFieldBegin(\"success\", thrift.Thrift.Type.STRUCT, 0);\n            this.success.write(output);\n            output.writeFieldEnd();\n        }\n        output.writeFieldStop();\n        output.writeStructEnd();\n        return;\n    }\n    public static read(input: thrift.TProtocol): GetRoleResult {\n        input.readStructBegin();\n        let _args: any = {};\n        while (true) {\n            const ret: thrift.TField = input.readFieldBegin();\n            const fieldType: thrift.Thrift.Type = ret.ftype;\n            const fieldId: number = ret.fid;\n            if (fieldType === thrift.Thrift.Type.STOP) {\n                break;\n            }\n            switch (fieldId) {\n                case 0:\n                    if (fieldType === thrift.Thrift.Type.STRUCT) {\n                        const value_2: Person.Person = Person.Person.read(input);\n                        _args.success = value_2;\n                    }\n                    else {\n                        input.skip(fieldType);\n                    }\n                    break;\n                default: {\n                    input.skip(fieldType);\n                }\n            }\n            input.readFieldEnd();\n        }\n        input.readStructEnd();\n        return new GetRoleResult(_args);\n    }\n}\nexport class Client {\n    public _seqid: number;\n    public _reqs: {\n        [name: number]: (err: Error | object | undefined, val?: any) => void;\n    };\n    public output: thrift.TTransport;\n    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;\n    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {\n        this._seqid = 0;\n        this._reqs = {};\n        this.output = output;\n        this.protocol = protocol;\n    }\n    public incrementSeqId(): number {\n        return this._seqid += 1;\n    }\n    public getRole(role: string): Promise<Person.Person> {\n        const requestId: number = this.incrementSeqId();\n        return new Promise<Person.Person>((resolve, reject): void => {\n            this._reqs[requestId] = (error, result) => {\n                delete this._reqs[requestId];\n                if (error != null) {\n                    reject(error);\n                }\n                else {\n                    resolve(result);\n                }\n            };\n            this.send_getRole(role, requestId);\n        });\n    }\n    public send_getRole(role: string, requestId: number): void {\n        const output: thrift.TProtocol = new this.protocol(this.output);\n        output.writeMessageBegin(\"getRole\", thrift.Thrift.MessageType.CALL, requestId);\n        const args: GetRoleArgs = new GetRoleArgs({ role });\n        args.write(output);\n        output.writeMessageEnd();\n        this.output.flush();\n        return;\n    }\n    public recv_getRole(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {\n        const noop = (): any => null;\n        const callback = this._reqs[requestId] || noop;\n        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {\n            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();\n            x.read(input);\n            input.readMessageEnd();\n            return callback(x);\n        }\n        else {\n            const result: GetRoleResult = GetRoleResult.read(input);\n            input.readMessageEnd();\n            if (result.success != null) {\n                return callback(undefined, result.success);\n            }\n            else {\n                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, \"getRole failed: unknown result\"));\n            }\n        }\n    }\n}\nexport interface IHandler {\n    getRole(role: string): Person.Person | Promise<Person.Person>;\n}\nexport class Processor {\n    public _handler: IHandler;\n    constructor(handler: IHandler) {\n        this._handler = handler;\n    }\n    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {\n        const metadata: thrift.TMessage = input.readMessageBegin();\n        const fname: string = metadata.fname;\n        const requestId: number = metadata.rseqid;\n        const methodName: string = \"process_\" + fname;\n        switch (methodName) {\n            case \"process_getRole\": {\n                this.process_getRole(requestId, input, output);\n                return;\n            }\n            default: {\n                input.skip(thrift.Thrift.Type.STRUCT);\n                input.readMessageEnd();\n                const errMessage = \"Unknown function \" + fname;\n                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);\n                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);\n                err.write(output);\n                output.writeMessageEnd();\n                output.flush();\n                return;\n            }\n        }\n    }\n    public process_getRole(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {\n        new Promise<Person.Person>((resolve, reject): void => {\n            try {\n                const args: GetRoleArgs = GetRoleArgs.read(input);\n                input.readMessageEnd();\n                resolve(this._handler.getRole(args.role));\n            }\n            catch (err) {\n                reject(err);\n            }\n        }).then((data: Person.Person): void => {\n            const result: GetRoleResult = new GetRoleResult({ success: data });\n            output.writeMessageBegin(\"getRole\", thrift.Thrift.MessageType.REPLY, requestId);\n            result.write(output);\n            output.writeMessageEnd();\n            output.flush();\n            return;\n        }).catch((err: Error): void => {\n            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);\n            output.writeMessageBegin(\"getRole\", thrift.Thrift.MessageType.EXCEPTION, requestId);\n            result.write(output);\n            output.writeMessageEnd();\n            output.flush();\n            return;\n        });\n    }\n}\n"],"sourceRoot":""}]}