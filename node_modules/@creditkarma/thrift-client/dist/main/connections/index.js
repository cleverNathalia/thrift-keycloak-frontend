"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const thrift_server_core_1 = require("@creditkarma/thrift-server-core");
const HttpConnection_1 = require("./HttpConnection");
const NullConnection_1 = require("./NullConnection");
const TcpConnection_1 = require("./TcpConnection");
__export(require("./HttpConnection"));
__export(require("./TcpConnection"));
function createClient(ServiceClient, options) {
    console.warn(`[Deprecated]: Please use 'createHttpClient' instead`);
    return createHttpClient(ServiceClient, options);
}
exports.createClient = createClient;
function createTcpClient(ServiceClient, options) {
    const connection = new TcpConnection_1.TcpConnection(options);
    connection.register(...(options.register || []));
    return new ServiceClient(connection);
}
exports.createTcpClient = createTcpClient;
function createHttpClient(ServiceClient, options) {
    let serviceName = '';
    if (ServiceClient.serviceName !== 'undefined') {
        serviceName = ServiceClient.serviceName;
    }
    else {
        const nullConnection = new NullConnection_1.NullConnection(thrift_server_core_1.BufferedTransport, thrift_server_core_1.BinaryProtocol);
        const nullClient = new ServiceClient(nullConnection);
        serviceName = nullClient._serviceName;
    }
    const connection = new HttpConnection_1.HttpConnection(thrift_server_core_1.deepMerge(options, { serviceName }));
    connection.register(...(options.register || []));
    return new ServiceClient(connection);
}
exports.createHttpClient = createHttpClient;
//# sourceMappingURL=index.js.map