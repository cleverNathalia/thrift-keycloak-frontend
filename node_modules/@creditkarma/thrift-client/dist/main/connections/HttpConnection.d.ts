/// <reference types="node" />
import * as Core from '@creditkarma/thrift-server-core';
import { Request, RequestAPI, RequiredUriUrl } from 'request';
import { IHttpConnectionOptions, IThriftClientFilter, IThriftClientFilterConfig, RequestOptions } from '../types';
export declare const DEFAULT_PATH: string;
export declare type HttpProtocol = 'http' | 'https';
export declare type RequestInstance = RequestAPI<Request, RequestOptions, RequiredUriUrl>;
export declare class HttpConnection extends Core.ThriftConnection<RequestOptions> {
    protected readonly port: number;
    protected readonly hostName: string;
    protected readonly path: string;
    protected readonly basePath: string;
    protected readonly url: string;
    protected readonly protocol: HttpProtocol;
    protected readonly filters: Array<IThriftClientFilter<RequestOptions>>;
    private readonly requestOptions;
    private readonly serviceName;
    private readonly withEndpointPerMethod;
    constructor({ hostName, port, path, https, transport, protocol, requestOptions, serviceName, withEndpointPerMethod, headerBlacklist, }: IHttpConnectionOptions);
    register(...filters: Array<IThriftClientFilterConfig<RequestOptions>>): void;
    send(dataToSend: Buffer, context?: RequestOptions): Promise<Buffer>;
    private write;
    private filtersForMethod;
}
